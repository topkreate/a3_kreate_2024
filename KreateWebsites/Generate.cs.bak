
using System;
using System.Collections;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Xml.Linq;
using System.Data.SqlClient;

using System.Collections.Generic;


using System.Net;
using System.IO;


namespace KreateWebsites
{
    public class Generate
    {


        



    protected string InputUrl;
    protected string OutputUrl;
    protected string InputFolder;
    protected string OutputFolder;
    protected string outputdir;
    bool overwrite = false;


  
   
    protected string SiteFolder;
  


    protected string local_path;
    protected string navigate_path;
    protected string pic_path;
    protected string PicturePath = Global.Pictures.defaultpath;
    protected string SlidePath = Global.Slides.defaultpath;
    protected string GalleryPath = Global.Gallery.defaultpath;
    protected string picpage = Global.picpage;
    protected string sitepath;
    protected string computerpath;

    protected void Init(object sender, EventArgs e)
    {

        // sitepath = @"http://places-to-see.net/";
        sitepath = Global.Siteurl;
        
     //   computerpath = @"C:\e\a1_sites\10\places-to-see.net\output\content\";
     computerpath = LocalPath.ComputerPath;

        SiteFolder = @"http://localhost:18868/places-to-see.net/generate/";


       




   //     local_path = @"C:\e\a1_sites\10\places-to-see.net\input\";    // path of picture folder in local drive
        local_path = LocalPath.InputPath;

      //  pic_path = @"http://pictures.10placestovisit.com/USA/Washington/";  // path of picture on web server
       // navigate_path = null;  // path where user will navigate to on clicking picture
       
        
        // OutputFolder = @"C:\e\a1_sites\10\places-to-see.net\output\";
        OutputFolder = LocalPath.OutPutPath;

  //      Generatesubdirs();

        /*
        textbox_sitepath.Text = sitepath;
        textbox_computerpath.Text = computerpath;
        textbox_sitefolder.Text = SiteFolder;
        textbox_inputpath.Text = local_path;
        textbox_outputpath.Text = OutputFolder;
        textbox_Photopath.Text = Global.photopath;
        check_overwrite.Text = overwrite.ToString(); ;


        button1.Click += new EventHandler(this.StartGenerate_Click);
         * */

      

       
    }
   

     void StartGenerate_Click(Object sender,
                           EventArgs e)

    {
         /*
         Button clickedButton = (Button)sender;
        clickedButton.Text = "...button clicked...";
        clickedButton.Enabled = false;

        sitepath = textbox_sitepath.Text.ToString() ;
         computerpath = textbox_computerpath.Text.ToString() ;
        SiteFolder = textbox_sitefolder.Text.ToString() ;
        local_path = textbox_inputpath.Text.ToString()  ;
        OutputFolder = textbox_outputpath.Text.ToString()  ;

        overwrite = Convert.ToBoolean(check_overwrite.Text.ToString());
         */

        GenerateContinent();
        GenerateCountries();
        

/*
        string[] subdirectoryEntries = Directory.GetDirectories(local_path);


        DirectoryInfo dInfo = new DirectoryInfo(local_path);


        foreach (DirectoryInfo di in dInfo.GetDirectories())
        {

            ProcessFolder(di, local_path, OutputFolder);  // Copy parent directory, input path, output path
        }
  */
    }

    protected void Generatesubdirs( )
    {

        string[] fileEntries = Directory.GetFiles(local_path);
    

       // Response.Write("input folder is " + ParentDir);
      string[] subdirectoryEntries = Directory.GetDirectories(local_path);


        DirectoryInfo dInfo = new DirectoryInfo(local_path);

         
        foreach (DirectoryInfo di in dInfo.GetDirectories())
    {
        
        ProcessFolder(di,local_path, OutputFolder);
    }
        foreach (FileInfo fi in dInfo.GetFiles())
    {
        //Do something with the file here
        //or create a method like:
        ProcessFile(fi) ;
    }


     
        
    }


    private void ProcessFolder(DirectoryInfo di, string local_path, string OutputFolder)
    {
        //  Response.Write("dir is " +  di.Name.ToString());


        string subfolder = di.Name.ToString();
        string localfolder = local_path;

        GetImagePath(localfolder + subfolder);  // setting the image path

        //  OutputFolder = OutputFolder + subfolder + @"\"; // this does not work, pass sub folder to pass article so that it can create sidelink

        //   LocalPath.ComputerPath = OutputFolder + subfolder;  // so that article control can read it
        //   LocalPath.SitePath = LocalPath.SitePath + "subfolder";

        if (File.Exists(local_path + subfolder + @"\pictures.list"))
        {

            InputUrl = SiteFolder + "photos-dir.aspx?local_path=" + localfolder + "&subfolder=" + subfolder + "&pic_path=" + pic_path + "&navigate_path=" + navigate_path + "&output_path=" + OutputFolder + subfolder + @"\";
           
            string picturesurl = Global.Pictures.url;
            if (File.Exists(local_path + subfolder + @"\pictures.picturesurl"))
            {
                
                picturesurl = System.IO.File.ReadAllText(local_path + subfolder + @"\pictures.picturesurl");  // if a folder does not need to use global class file name, it can be overridden here.
                picturesurl = picturesurl.Trim();
     
            }

            OutputUrl = OutputFolder + subfolder + @"\" + picturesurl + ".html";


            //   Response.Write("url = " + InputUrl + "<br/> " + OutputUrl);
            GenerateHTML(InputUrl, OutputUrl); // Write gallery page
        }

        if (File.Exists(local_path + subfolder + @"\gallery.list"))
        {
            InputUrl = SiteFolder + "gallery.aspx?local_path=" + localfolder + "&subfolder=" + subfolder + "&pic_path=" + pic_path + "&navigate_path=" + navigate_path + "&output_path=" + OutputFolder + subfolder + @"\";
            string galleryurl = Global.Gallery.url;

            if (File.Exists(local_path + subfolder + @"\gallery.galleryurl"))
            {
                galleryurl = System.IO.File.ReadAllText(local_path + subfolder + @"\gallery.galleryurl");  // if a folder does not need to use global class file name, it can be overridden here.
                galleryurl = galleryurl.Trim();
                
            }

            // OutputUrl = OutputFolder + subfolder + @"\" + "gallery" + ".html";
            OutputUrl = OutputFolder + subfolder + @"\" + galleryurl + ".html";

            //   Response.Write("url = " + InputUrl + "<br/> " + OutputUrl);
            GenerateHTML(InputUrl, OutputUrl); // Write gallery page
        }

        if (File.Exists(local_path + subfolder + @"\slides.list"))  // if slides.list does not exist, system will not generate slides.html
        {
            InputUrl = SiteFolder + "slides.aspx?local_path=" + localfolder + "&subfolder=" + subfolder + "&pic_path=" + pic_path + "&navigate_path=" + navigate_path + "&output_path=" + OutputFolder + subfolder + @"\";

            string slideurl = Global.Slides.url; // use slides name from global class
            if (File.Exists(local_path + subfolder + @"\slides.slidesurl"))
            {
                slideurl = System.IO.File.ReadAllText(local_path + subfolder + @"\slides.slidesurl");  // if a folder does not need to use global class file name, it can be overridden here.
                slideurl = slideurl.Trim();
            }
            //  OutputUrl = OutputFolder + subfolder + @"\" + "slides" + ".html";
            OutputUrl = OutputFolder + subfolder + @"\" + slideurl + ".html";

         //    Response.Write("slide url = " + InputUrl + "<br/> " + OutputUrl);
            GenerateHTML(InputUrl, OutputUrl); // Write gallery page
        }

        bool pictures_individualpage = Global.Pictures.individualpage;
        if (File.Exists(local_path + subfolder + @"\pictures.individualpage"))
        {
            string individualpage = System.IO.File.ReadAllText(local_path + subfolder + @"\pictures.individualpage");
            individualpage.Trim();

            if (individualpage[0] == '1')
                pictures_individualpage = true;
            else
                pictures_individualpage = false;
          // pictures_individualpage = individualpage.Equals("1", StringComparison.Ordinal);
       
          
        }
        if (pictures_individualpage == true)
        {

            GeneratePhotos_dirscan(local_path, OutputFolder, subfolder); // Write sub pages.  each page show 1 photo

        }





        bool slides_individualpage = Global.Slides.individualpage;
        if (File.Exists(local_path + subfolder + @"\slides.individualpage"))
        {
            string individualpage = System.IO.File.ReadAllText(local_path + subfolder + @"\slides.individualpage");
            individualpage.Trim();

            if (individualpage[0] == '1')
                slides_individualpage = true;
            else
                slides_individualpage = false;

            // not working - slides_individualpage = individualpage.Equals("1", StringComparison.Ordinal);
        //    Response.Write("in slide generation:" + individualpage + ":" + subfolder + "<br/> ");

           
        }

        if (slides_individualpage == true)
        {
           // Response.Write("in slide generation 2" + subfolder + "<br/>");
            GenerateSlides_dirscan(local_path, OutputFolder, subfolder); // Write sub pages.  each page show 1 photo

        }
        else
        {
           // Response.Write("NO slide generation " + subfolder + "<br/>");
        }



        if (Global.Gallery.individualpage == true)
        {
            GenerateGallery_dirscan(local_path, OutputFolder, subfolder); // Write sub pages.  each page show 1 photo
        }



        
        InputUrl = SiteFolder + "folder-names-generate.aspx?local_path=" + localfolder + "&subfolder=" + subfolder + "&pic_path=" + pic_path + "&navigate_path=" + navigate_path + "&output_path=" + OutputFolder + subfolder + @"\";

        OutputUrl = OutputFolder + subfolder + @"\" + "foldermap" + ".htm";

        GenerateHTML(InputUrl, OutputUrl); // Write gallery page

        
        InputUrl = SiteFolder + "folder-link-generate.aspx?local_path=" + localfolder + "&subfolder=" + subfolder + "&pic_path=" + pic_path + "&navigate_path=" + navigate_path + "&output_path=" + OutputFolder + subfolder + @"\";

        OutputUrl = OutputFolder + subfolder + @"\" + "linkmap" + ".htm";

        GenerateHTML(InputUrl, OutputUrl); // Write gallery page

        


        GenerateArticle(local_path, OutputFolder, subfolder); // Write sub pages.  each page show 1 photo


        local_path = local_path + subfolder + "\\";  // for recurssion.  Not tested
        OutputFolder = OutputFolder + subfolder + "\\"; // not tested
        string[] subdirectoryEntries = Directory.GetDirectories(localfolder);


        DirectoryInfo dInfo = new DirectoryInfo(local_path);


        foreach (DirectoryInfo subdi in dInfo.GetDirectories())
        {

            if (subdi.Name.ToString() != "thumbnails")
            {
                // local_path = local_path  + subfolder + "\\"  ;
                // OutputFolder =  OutputFolder + subfolder + "\\" ;
                ProcessFolder(subdi, local_path, OutputFolder);


            }
        }



    }


   

    private void ProcessFile(FileInfo fi)
    {

    //    Response.Write("file is " + fi.Name.ToString() );
    }

    protected void GenerateHTML(string inputurl, string outputurl)
    {

        try
        {

            if ((!File.Exists(outputurl)) || (overwrite))
            {
              //  Response.Write("in HTML : input " + inputurl + "<br/>");

            //    Response.Write("in HTML : output " + outputurl + "<br/>");


                WebRequest req = WebRequest.Create(inputurl);
                WebResponse res = req.GetResponse();
                StreamReader sr = new StreamReader(res.GetResponseStream());
                string html = sr.ReadToEnd();

                writefile(html, outputurl);
            }
        }
        catch (Exception e)
        {
           // Response.Write("Exception" +  e.Message);
           
        }


    }

    protected void writefile(string html, string localpath)
    {
        // string localpath ;
        // localpath = "f:\\" + siteurl + "\\" + path7 + "\\" + param + ".html";
        //   localpath = "f:\\test\\" + param + ".html";
        //  StreamWriter _testData = new StreamWriter("f:\\" + siteurl + "\\" + path7 + "\\" + param) ;
        //   StreamWriter _testData = new StreamWriter("f:\\test\\data3.html", true);

  //      Response.Write("<br/> Directory created : " + localpath);
        Directory.CreateDirectory(Path.GetDirectoryName(localpath));

        //     StreamWriter _testData = new StreamWriter(localpath, true);  // to append to existing file
        StreamWriter _testData = new StreamWriter(localpath, false);  // to overwrite existing file
        _testData.WriteLine(html); // Write the file.
        _testData.Close(); // Close the instance of StreamWriter.
        _testData.Dispose(); // Dispose from memory.       

    //    Response.Write("<br/> File created : " + localpath   );
    }

    public void GetImagePath(string inputdir)
    {

    

        // Default value of pictures path is t\aken from global. The value can be overriden by providing a value in file pictures.path 
        PicturePath = Global.Pictures.defaultpath;
        if (File.Exists(inputdir + @"\pictures.path"))
        {
            string str = System.IO.File.ReadAllText(inputdir + @"\pictures.path");

            PicturePath = str.TrimEnd('\r', '\n');  // This will remove any combination of carriage returns and newlines from 
  
        }
    }




    public void GetSlidePath(string inputdir)
    {



        // Default value of pictures path is taken from global. The value can be overriden by providing a value in file pictures.path 
        SlidePath = Global.Slides.defaultpath;
        //  Response.Write("slide path 1 = " + SlidePath + " <br/>");
        if (File.Exists(inputdir + @"\slides.path"))
        {
            string str = System.IO.File.ReadAllText(inputdir + @"\slides.path");

            SlidePath = str.TrimEnd('\r', '\n');  // This will remove any combination of carriage returns and newlines from 


        }
    }
    public void GetGalleryPath(string inputdir)
    {



        // Default value of pictures path is taken from global. The value can be overriden by providing a value in file pictures.path 
        GalleryPath = Global.Gallery.defaultpath;
        //  Response.Write("slide path 1 = " + SlidePath + " <br/>");
        if (File.Exists(inputdir + @"\gallery.path"))
        {
            string str = System.IO.File.ReadAllText(inputdir + @"\gallery.path");

            GalleryPath = str.TrimEnd('\r', '\n');  // This will remove any combination of carriage returns and newlines from 


        }
    }
    protected void GeneratePhotos_dirscan(string inputdir, string outputdir, string picsubfolder)
    {



        string imageurl;
        string imagename;
        string extension;
        string imagefullurl;

        string picdir = outputdir + "\\" + picsubfolder;

     //   LocalPath.ComputerPath = picdir;  // so that article control can read it
    //    LocalPath.SitePath = LocalPath.SitePath + @"/" + picsubfolder;

        try
        {
            string[] fileEntries = Directory.GetFiles(picdir);
            int i = 0;

            GetImagePath(inputdir+ @"\" + picsubfolder);   // public function.  use pictures.path file if given, otherwise use Global path

            if (Global.Pictures.includepictures == true)
            {

                foreach (string path in fileEntries)
                {





                    if (File.Exists(path))
                    {
                        // This path is a file

                        imageurl = System.IO.Path.GetFileName(path);
                        imagename = System.IO.Path.GetFileNameWithoutExtension(path);




                        imagefullurl = PicturePath + Global.Pictures.sizepath + imageurl;
                        extension = System.IO.Path.GetExtension(path);

                        if ((extension.ToLower() == ".jpg") || (extension.ToLower() == ".jpeg") || (extension.ToLower() == ".png"))
                        {


                            InputUrl = SiteFolder + "photo.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\";  //output path for article  control to generate links
                      
                            OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
                            i++;

                      


                            GenerateHTML(InputUrl, OutputUrl);


                        }

                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }




                }  // for
            }   // if include pictures == true

    

            //  This read pictures.list. You can specify picture filename in this file.
            if (File.Exists(inputdir + @"\" + picsubfolder + @"\pictures.list"))
            {
           

                System.IO.StreamReader file =
                   new System.IO.StreamReader(inputdir +  @"\" + picsubfolder + @"\pictures.list");
                while ((imageurl = file.ReadLine()) != null)
                {
                    //name = url; // remove .jpg

               
                    imagename = imageurl.Replace(".jpg", "");
                    imagename = imagename.Replace(".jpeg", "");
                    imagename = imagename.Replace(".png", "");
                    imagename = imagename.Replace(".JPG", "");
                    imagename = imagename.Replace(".JPEG", "");
                    imagename = imagename.Replace(".PNG", "");
/* works for 3 character extension
                    imagename = imageurl.Remove(imageurl.Length - 4, 4); */

                    imagefullurl = PicturePath + Global.Pictures.sizepath + @"/" + imageurl;

                    InputUrl = SiteFolder + "photo.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\";
           
                    OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";


                    GenerateHTML(InputUrl, OutputUrl);
                 
                }

                file.Close();


            }

        }
        catch (Exception e)
        {
           // Response.Write("Exception is : " + e.Message);
        }


    }

    protected void GenerateSlides_dirscan(string inputdir, string outputdir, string picsubfolder)
    {



        string imageurl;
        string imagename;
        string extension;
        string imagefullurl;

        // string picdir = outputdir + "\\" + picsubfolder;
        string picdir = inputdir + "\\" + picsubfolder;  // if there is bug chnage it to input


 
        try
        {
            string[] fileEntries = Directory.GetFiles(picdir);
            int i = 0;

            GetSlidePath(inputdir + @"\" + picsubfolder);   // public function.  use pictures.path file if given, otherwise use Global path
            if (Global.Slides.includepictures == true)
            {
                foreach (string path in fileEntries)
                {



                    //   Response.Write("<br/>In path  = " + path);

                    if (File.Exists(path))
                    {
                        // This path is a file

                        imageurl = System.IO.Path.GetFileName(path);
                        imagename = System.IO.Path.GetFileNameWithoutExtension(path);




                        imagefullurl = SlidePath + Global.Slides.sizepath + imageurl;
                        extension = System.IO.Path.GetExtension(path);

                        if ((extension.ToLower() == ".jpg") || (extension.ToLower() == ".jpeg") || (extension.ToLower() == ".png"))
                        {





                            InputUrl = SiteFolder + "slide.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + outputdir + @"\";  //output path for article  control to generate links
                            OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
                            i++;

                            //      Response.Write("Inputurl slide = " + InputUrl + "<br/>");






                            GenerateHTML(InputUrl, OutputUrl);


                        }

                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }




                }  // for

            } // includepictures == true
           

            //  This read pictures.list. You can specify picture filename in this file.
            if (File.Exists(inputdir + @"\" + picsubfolder + @"\slides.list"))
            {


                System.IO.StreamReader file =
                   new System.IO.StreamReader(inputdir + @"\" + picsubfolder + @"\slides.list");
                while ((imageurl = file.ReadLine()) != null)
                {
                    //name = url; // remove .jpg


                    imagename = imageurl.Replace(".jpg", "");
                    imagename = imagename.Replace(".jpeg", "");
                    imagename = imagename.Replace(".png", "");
                    imagename = imagename.Replace(".JPG", "");
                    imagename = imagename.Replace(".JPEG", "");
                    imagename = imagename.Replace(".PNG", "");
                    /* works for 3 character extension
                                        imagename = imageurl.Remove(imageurl.Length - 4, 4); */

                    imagefullurl = SlidePath + Global.Slides.sizepath + imageurl;

                    //      InputUrl = SiteFolder + "photo.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\";

                    //    OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
                  

                    InputUrl = SiteFolder + "slide.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\" + "&local_path=" + inputdir + @"\" + "&subfolder=" + picsubfolder;

                    OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
             

                    GenerateHTML(InputUrl, OutputUrl);

                }

                file.Close();


            }

        }
        catch (Exception e)
        {
        //    Response.Write("Exception is : " + e.Message);
        }


    }

    protected void GenerateGallery_dirscan(string inputdir, string outputdir, string picsubfolder)
    {



        string imageurl;
        string imagename;
        string extension;
        string imagefullurl;

        // string picdir = outputdir + "\\" + picsubfolder;
        string picdir = inputdir + "\\" + picsubfolder;  // if there is bug chnage it to input


        //  Response.Write("<br/>In Gen Photo  = " + inputdir + " " + picsubfolder);
        try
        {
            string[] fileEntries = Directory.GetFiles(picdir);
            int i = 0;

            GetGalleryPath(inputdir + @"\" + picsubfolder);   // public function.  use pictures.path file if given, otherwise use Global path

            if (Global.Gallery.includepictures == true)
            {
                foreach (string path in fileEntries)
                {



                    //   Response.Write("<br/>In path  = " + path);

                    if (File.Exists(path))
                    {
                        // This path is a file

                        imageurl = System.IO.Path.GetFileName(path);
                        imagename = System.IO.Path.GetFileNameWithoutExtension(path);




                        imagefullurl = GalleryPath + Global.Gallery.sizepath + imageurl;
                        extension = System.IO.Path.GetExtension(path);

                        if ((extension.ToLower() == ".jpg") || (extension.ToLower() == ".jpeg") || (extension.ToLower() == ".png"))
                        {





                            InputUrl = SiteFolder + "Image.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + outputdir + @"\";  //output path for article  control to generate links
                            OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
                            i++;

                            //       Response.Write("Inputurl Image = " + InputUrl + "<br/>");






                            GenerateHTML(InputUrl, OutputUrl);


                        }

                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }




                }  // for

            }  // include pictures == true
            //      Response.Write("input dir = " + inputdir + @"\" + picsubfolder + @"\pictures.list");

            //  This read pictures.list. You can specify picture filename in this file.
            if (File.Exists(inputdir + @"\" + picsubfolder + @"\gallery.list"))
            {


                System.IO.StreamReader file =
                   new System.IO.StreamReader(inputdir + @"\" + picsubfolder + @"\gallery.list");
                while ((imageurl = file.ReadLine()) != null)
                {
                    //name = url; // remove .jpg


                    imagename = imageurl.Replace(".jpg", "");
                    imagename = imagename.Replace(".jpeg", "");
                    imagename = imagename.Replace(".png", "");
                    imagename = imagename.Replace(".JPG", "");
                    imagename = imagename.Replace(".JPEG", "");
                    imagename = imagename.Replace(".PNG", "");
                    /* works for 3 character extension
                                        imagename = imageurl.Remove(imageurl.Length - 4, 4); */

                    imagefullurl = GalleryPath + Global.Gallery.sizepath + imageurl;

                    //      InputUrl = SiteFolder + "photo.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\";

                    //    OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";


                    InputUrl = SiteFolder + "image.aspx?imageurl=" + imagefullurl + "&name=" + imagename + "&output_path=" + picdir + @"\";

                    OutputUrl = outputdir + picsubfolder + "/" + imagename + ".html";
        //            Response.Write("slide = " + InputUrl);

                    GenerateHTML(InputUrl, OutputUrl);

                }

                file.Close();


            }

        }
        catch (Exception e)
        {
        //    Response.Write("Exception is : " + e.Message);
        }


    }
    protected void GenerateArticle(string inputdir, string outputdir, string subfolder)
    {




        string localfolder = local_path;

        string dir = inputdir + subfolder;
        string OutputFolder = outputdir + subfolder + @"\" ; // to pass article so that it can create sidelink




  //      Response.Write("<br/> OutputFolder = " + OutputFolder);
        try
        {
            string[] fileEntries = Directory.GetFiles(dir);
            int i = 0;


            foreach (string path in fileEntries)
            {

                
                string url;
                string name;
                string extension;
                string fullurl;
                string articleurl;

                if (File.Exists(path))
                {
                    // This path is a file

                    url = System.IO.Path.GetFileName(path);
                    name = System.IO.Path.GetFileNameWithoutExtension(path);

                    fullurl = inputdir + subfolder + "\\" + url;
                    extension = System.IO.Path.GetExtension(path);

                 //   Response.Write("<br/> Path = " + path);
                    if ((extension.ToLower() == ".txt") || (extension.ToLower() == ".htm") || (extension.ToLower() == ".article"))
                    {

                        
                        InputUrl = SiteFolder + "article.aspx?url=" + path + "&name=" + name + "&output_path=" + OutputFolder;

                        articleurl = name;
                     //   Response.Write("<br/> Generate Article : " + inputdir + subfolder + name);
                        if (File.Exists(inputdir +  subfolder + @"\" + name + @".articleurl"))
                        {
                            articleurl = System.IO.File.ReadAllText(inputdir + subfolder + @"\" + name + @".articleurl");  // if a folder does not need to use global class file name, it can be overridden here.
                            articleurl = articleurl.Trim();

                        }
                        
                       // OutputUrl = outputdir + subfolder + "/" + name + ".html";
                        OutputUrl = outputdir + subfolder + @"/" + articleurl + ".html";
              
                        i++;

                        //   Response.Write("<br/>");
                        //  Response.Write(OutputUrl);

            //            Response.Write("<br/> InputUrl : " + InputUrl + " AND " + OutputUrl);
                      GenerateHTML(InputUrl, OutputUrl);


                    }

                }
                else
                {
                    Console.WriteLine("No rows found.");
                }




            }  // for



        }
        catch (Exception e)
        {
    //        Response.Write("Exception is : " + e.Message);
        }


    }





    protected void GenerateContinent()
    {

        InputFolder = SiteFolder;

        try
        {

            // string sp = "regions_search";
            string sp = "continent_search";


            string connect = ConfigurationManager.ConnectionStrings["filmslocal"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connect))
            {

                using (SqlCommand cmd = new SqlCommand(sp, conn))
                {

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Continent", "all");
                    cmd.Parameters.AddWithValue("@geo", "all");
                    cmd.Parameters.AddWithValue("@Country", "all");

                    cmd.Parameters.AddWithValue("@n", 30);
                    cmd.Parameters.AddWithValue("@SortOrder", 3);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();



                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            InputUrl = InputFolder + "best.aspx?continent=" + reader["continent"].ToString();
                            OutputUrl = OutputFolder + @"content/" + reader["continent"].ToString() + "\\best.html";
                            //     OutputUrl = OutputFolder + reader["country"].ToString() + "\\" + "cities-in-" + reader["Region"].ToString() + ".html";
                         
                            //   InputUrl = InputFolder + reader.["statename"].tostring();
                            //     Console.WriteLine("{0}\t{1}", reader.GetInt32(0), reader.GetString(1));
                            GenerateHTML(InputUrl, OutputUrl);




                        }
                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }
                    conn.Close();
                }

            }



        }
        catch (Exception ex)
        {
       //     Response.Write("Exception : " + ex.Message.ToString());

        }

    }

    protected void GenerateCountries()
    {


        try
        {

            // string sp = "regions_search";
            string sp = "countries_search";


            string connect = ConfigurationManager.ConnectionStrings["films"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connect))
            {

                using (SqlCommand cmd = new SqlCommand(sp, conn))
                {

                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Continent", "all");
                    cmd.Parameters.AddWithValue("@geo", "all");
                    cmd.Parameters.AddWithValue("@Country", "all");

                    cmd.Parameters.AddWithValue("@n", 100);
                    cmd.Parameters.AddWithValue("@SortOrder", 2);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();



                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {

                            //   InputUrl = InputFolder + reader.["statename"].tostring();
                            //     Console.WriteLine("{0}\t{1}", reader.GetInt32(0), reader.GetString(1));



                            //   InputUrl = InputFolder + "default.aspx?continent=" + reader["continent"].ToString() + "&country=" + reader["country"].ToString() ;
                            InputUrl = InputFolder +  "best.aspx?country=" + reader["country"].ToString();
                            OutputUrl = OutputFolder + @"content\" +  @"\" + reader["country"].ToString() + @"\best.html";


                            

                            GenerateHTML(InputUrl, OutputUrl);


                            InputUrl = InputFolder + "capital.aspx?country=" + reader["country"].ToString();
                            OutputUrl = OutputFolder + @"content\" + @"\" + reader["country"].ToString() + @"\capital.html";


                           

                            GenerateHTML(InputUrl, OutputUrl);


                        }
                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }
                    conn.Close();
                }

            }



        }
        catch (Exception ex)
        {
         //   Response.Write("Exception : " + ex.Message.ToString());

        }

    }
    protected void GenerateStates()
    {


        try
        {

            // string sp = "regions_search";
            string sp = "regions_v2";


            string connect = ConfigurationManager.ConnectionStrings["films"].ConnectionString;

            using (SqlConnection conn = new SqlConnection(connect))
            {

                using (SqlCommand cmd = new SqlCommand(sp, conn))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Country", Global.Country.ToString());

                    cmd.Parameters.AddWithValue("@n", 100);
                    cmd.Parameters.AddWithValue("@SortOrder", 3);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();



                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            InputUrl = InputFolder + "default.aspx?continent=" + reader["continent"].ToString() + "&country=" + reader["country"].ToString() + "&statename=" + reader["Region"].ToString();
                            OutputUrl = OutputFolder + reader["continent"].ToString() + "\\" + reader["country"].ToString() + "\\" + reader["Region"].ToString() + "\\index.html";
                            GenerateHTML(InputUrl, OutputUrl);



                            //     OutputUrl = OutputFolder + reader["country"].ToString() + "\\" + "cities-in-" + reader["Region"].ToString() + ".html";
                          
                            //   InputUrl = InputFolder + reader.["statename"].tostring();
                            //     Console.WriteLine("{0}\t{1}", reader.GetInt32(0), reader.GetString(1));

                        }
                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }
                    conn.Close();
                }

            }



        }
        catch (Exception ex)
        {
         //   Response.Write("Exception : " + ex.Message.ToString());

        }

    }
    protected void GenerateCities()
    {

        try
        {
            string sp = "cities_search";


            string connect = ConfigurationManager.ConnectionStrings["films"].ConnectionString;


            using (SqlConnection conn = new SqlConnection(connect))
            {

                using (SqlCommand cmd = new SqlCommand(sp, conn))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Country", Global.Country.ToString());
                    cmd.Parameters.AddWithValue("@Region", "all");
                    cmd.Parameters.AddWithValue("@n", 5000);
                    cmd.Parameters.AddWithValue("@SortOrder", 3);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();



                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            InputUrl = InputFolder + "?city=" + reader["city"].ToString();
                            OutputUrl = OutputFolder + reader["region"].ToString() + "\\" + reader["city"].ToString() + "\\index.html";
                            // Console.WriteLine("{0}\t{1}", reader.GetInt32(0), reader.GetString(1));
                         
                            GenerateHTML(InputUrl, OutputUrl);


                            InputUrl = InputFolder + "about.aspx?city=" + reader["city"].ToString();
                            OutputUrl = OutputFolder + reader["region"].ToString() + "\\" + reader["city"].ToString() + "\\about.html";
                            GenerateHTML(InputUrl, OutputUrl);


                            InputUrl = InputFolder + "list.aspx?city=" + reader["city"].ToString();
                            OutputUrl = OutputFolder + reader["region"].ToString() + "\\" + reader["city"].ToString() + "\\attractions.html";
                            GenerateHTML(InputUrl, OutputUrl);
                        }
                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }

                    conn.Close();
                }

            }

        }
        catch (Exception ex)
        {
          //  Response.Write("Exception : " + ex.Message.ToString());

        }



    }

    protected void GeneratePlaces()
    {

        try
        {
            string sp = "best_tourist_places_search";


            string connect = ConfigurationManager.ConnectionStrings["films"].ConnectionString;


            using (SqlConnection conn = new SqlConnection(connect))
            {

                using (SqlCommand cmd = new SqlCommand(sp, conn))
                {

                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Parameters.AddWithValue("@Country", Global.Country.ToString());

                    cmd.Parameters.AddWithValue("@State", "all");
                    cmd.Parameters.AddWithValue("@city", "all");
                    cmd.Parameters.AddWithValue("@Category", "all");
                    cmd.Parameters.AddWithValue("@SubCategory", "all");
                    cmd.Parameters.AddWithValue("@n", 2000);
                    cmd.Parameters.AddWithValue("@SortOrder", 1);



                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();



                    if (reader.HasRows)
                    {
                        while (reader.Read())
                        {
                            InputUrl = InputFolder + "?name=" + reader["biz_name"].ToString();
                            OutputUrl = OutputFolder + reader["region"].ToString() + "\\" + reader["city"].ToString() + "\\" + reader["biz_name"].ToString() + ".html";
                            // Console.WriteLine("{0}\t{1}", reader.GetInt32(0), reader.GetString(1));
                       
                            GenerateHTML(InputUrl, OutputUrl);



                        }
                    }
                    else
                    {
                        Console.WriteLine("No rows found.");
                    }

                    conn.Close();
                }

            }

        }
        catch (Exception ex)
        {
       //     Response.Write("Exception : " + ex.Message.ToString());

        }



    }

}

}






